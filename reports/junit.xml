<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="4" time="5.198" timestamp="2024-03-23T04:03:36.057931" hostname="ip-10-10-6-150.eu-central-1.compute.internal"><testcase classname="tests.api.test_api.TestBatchPipeline" name="test_should_failed_unkown_column_1" time="0.438" /><testcase classname="tests.api.test_api.TestBatchPipeline" name="test_should_failed_unkown_column_2" time="0.068" /><testcase classname="tests.api.test_api.TestBatchPipeline" name="test_should_failed_unkown_column_3" time="0.045" /><testcase classname="tests.api.test_api.TestBatchPipeline" name="test_should_get_predict" time="0.044"><failure message="AssertionError: 400 != 200">self = &lt;tests.api.test_api.TestBatchPipeline testMethod=test_should_get_predict&gt;

    def test_should_get_predict(self):
        data = {
            "flights": [
                {
                    "OPERA": "Aerolineas Argentinas",
                    "TIPOVUELO": "N",
                    "MES": 3
                }
            ]
        }
        # change this line to the model of chosing
        # when("xgboost.XGBClassifier").predict(ANY).thenReturn(np.array([0]))
        response = self.client.post("/predict", json=data)
&gt;       self.assertEqual(response.status_code, 200)
E       AssertionError: 400 != 200

tests/api/test_api.py:24: AssertionError</failure></testcase></testsuite></testsuites>